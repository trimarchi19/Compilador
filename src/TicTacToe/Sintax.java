
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 12 17:56:29 CST 2020
//----------------------------------------------------

package TicTacToe;

import java_cup.runtime.*;
import classes.*;
import java.util.ArrayList;
import java.lang.reflect.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 12 17:56:29 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\004\000\002\002\004\000\002\003\013" +
    "\000\002\003\013\000\002\003\013\000\002\003\013\000" +
    "\002\003\013\000\002\005\004\000\002\005\003\000\002" +
    "\004\011\000\002\006\004\000\002\006\003\000\002\007" +
    "\013\000\002\007\013\000\002\007\013\000\002\007\013" +
    "\000\002\007\013\000\002\013\005\000\002\013\003\000" +
    "\002\013\002\000\002\012\004\000\002\012\004\000\002" +
    "\015\004\000\002\015\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\020\006\000\002\020\006\000\002" +
    "\020\006\000\002\021\004\000\002\026\005\000\002\026" +
    "\003\000\002\026\005\000\002\025\004\000\002\044\004" +
    "\000\002\044\002\000\002\043\003\000\002\040\005\000" +
    "\002\040\003\000\002\041\005\000\002\041\003\000\002" +
    "\042\005\000\002\042\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\006\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\010\005\000\002\010\003\000\002\010\002\000" +
    "\002\011\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\051\010\000\002\051" +
    "\010\000\002\051\010\000\002\051\010\000\002\052\004" +
    "\000\002\052\003\000\002\053\007\000\002\030\010\000" +
    "\002\030\011\000\002\030\010\000\002\030\010\000\002" +
    "\030\010\000\002\031\004\000\002\032\005\000\002\032" +
    "\006\000\002\032\005\000\002\032\006\000\002\032\005" +
    "\000\002\032\005\000\002\047\003\000\002\037\004\000" +
    "\002\037\004\000\002\033\010\000\002\033\010\000\002" +
    "\033\010\000\002\033\010\000\002\033\010\000\002\034" +
    "\014\000\002\034\014\000\002\034\014\000\002\034\014" +
    "\000\002\034\014\000\002\034\014\000\002\034\014\000" +
    "\002\034\014\000\002\034\014\000\002\036\005\000\002" +
    "\036\006\000\002\036\006\000\002\035\006\000\002\035" +
    "\006\000\002\035\006\000\002\035\006\000\002\023\007" +
    "\000\002\023\010\000\002\023\010\000\002\023\010\000" +
    "\002\024\007\000\002\024\007\000\002\024\007\000\002" +
    "\024\007\000\002\024\007\000\002\024\007\000\002\024" +
    "\007\000\002\024\007\000\002\045\003\000\002\046\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0171\000\006\003\006\011\004\001\002\000\022\003" +
    "\u0156\004\025\007\021\010\023\046\024\055\022\056\016" +
    "\066\020\001\002\000\004\002\000\001\002\000\024\003" +
    "\006\004\025\007\021\010\023\011\004\046\024\055\022" +
    "\056\016\066\020\001\002\000\006\003\014\011\004\001" +
    "\002\000\006\003\ufff6\011\ufff6\001\002\000\004\002\012" +
    "\001\002\000\004\002\001\001\002\000\006\002\ufffe\011" +
    "\u0131\001\002\000\020\004\025\007\021\010\023\046\024" +
    "\055\022\056\016\066\020\001\002\000\006\003\ufff7\011" +
    "\ufff7\001\002\000\010\003\uffbe\012\uffbe\060\uffbe\001\002" +
    "\000\004\012\026\001\002\000\010\003\uffbb\012\uffbb\060" +
    "\uffbb\001\002\000\010\003\uffbd\012\uffbd\060\uffbd\001\002" +
    "\000\010\003\uffbf\012\uffbf\060\uffbf\001\002\000\010\003" +
    "\uffbc\012\uffbc\060\uffbc\001\002\000\010\003\uffc0\012\uffc0" +
    "\060\uffc0\001\002\000\010\003\uffc1\012\uffc1\060\uffc1\001" +
    "\002\000\004\022\027\001\002\000\022\004\025\007\021" +
    "\010\023\023\uffeb\046\024\055\022\056\016\066\020\001" +
    "\002\000\010\003\uffec\021\u012d\023\uffec\001\002\000\006" +
    "\003\u012c\060\u012b\001\002\000\004\023\033\001\002\000" +
    "\004\017\034\001\002\000\026\005\055\013\052\014\042" +
    "\015\036\027\064\031\041\033\046\037\045\043\043\060" +
    "\051\001\002\000\042\005\uffb5\013\uffb5\014\uffb5\015\uffb5" +
    "\020\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\041\uffb5\043\uffb5\060\uffb5\001\002" +
    "\000\006\003\u011d\022\u011e\001\002\000\042\005\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\020\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\035\uffe1\036\uffe1\037\uffe1\041\uffe1\043" +
    "\uffe1\060\uffe1\001\002\000\006\003\u0110\022\u0111\001\002" +
    "\000\006\003\375\022\376\001\002\000\004\022\366\001" +
    "\002\000\030\003\361\052\104\053\101\054\077\057\100" +
    "\060\106\061\103\062\111\063\102\064\107\065\105\001" +
    "\002\000\010\003\356\016\uffd8\021\355\001\002\000\006" +
    "\003\325\022\326\001\002\000\006\003\300\022\301\001" +
    "\002\000\042\005\uffb3\013\uffb3\014\uffb3\015\uffb3\020\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\041\uffb3\043\uffb3\060\uffb3\001\002\000\042" +
    "\005\uffe6\013\uffe6\014\uffe6\015\uffe6\020\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\041\uffe6\043\uffe6\060\uffe6\001\002\000\012\003\uffd4\006" +
    "\274\016\uffd4\021\uffd4\001\002\000\004\022\251\001\002" +
    "\000\042\005\055\013\052\014\042\015\036\020\uffe7\027" +
    "\064\030\uffe7\031\041\032\uffe7\033\046\035\uffe7\036\uffe7" +
    "\037\045\041\uffe7\043\043\060\051\001\002\000\042\005" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\020\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5\041" +
    "\uffe5\043\uffe5\060\uffe5\001\002\000\022\003\241\004\025" +
    "\007\021\010\023\046\024\055\022\056\016\066\020\001" +
    "\002\000\042\005\uffb6\013\uffb6\014\uffb6\015\uffb6\020\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\041\uffb6\043\uffb6\060\uffb6\001\002\000\042" +
    "\005\uffb4\013\uffb4\014\uffb4\015\uffb4\020\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\041\uffb4\043\uffb4\060\uffb4\001\002\000\042\005\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\020\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\035\uffe2\036\uffe2\037\uffe2\041\uffe2\043" +
    "\uffe2\060\uffe2\001\002\000\004\016\237\001\002\000\042" +
    "\005\uffe4\013\uffe4\014\uffe4\015\uffe4\020\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\041\uffe4\043\uffe4\060\uffe4\001\002\000\042\005\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\020\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\035\uffe3\036\uffe3\037\uffe3\041\uffe3\043" +
    "\uffe3\060\uffe3\001\002\000\006\003\067\022\070\001\002" +
    "\000\004\020\066\001\002\000\006\002\ufffb\011\ufffb\001" +
    "\002\000\004\004\073\001\002\000\006\003\071\004\073" +
    "\001\002\000\004\016\220\001\002\000\006\003\126\016" +
    "\127\001\002\000\006\003\075\060\074\001\002\000\006" +
    "\003\122\006\121\001\002\000\004\006\076\001\002\000" +
    "\026\052\104\053\101\054\077\057\100\060\106\061\103" +
    "\062\111\063\102\064\107\065\105\001\002\000\026\003" +
    "\uffc9\016\uffc9\021\uffc9\023\uffc9\025\uffc9\026\uffc9\045\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\001\002\000\026\003\uffcc\016" +
    "\uffcc\021\uffcc\023\uffcc\025\uffcc\026\uffcc\045\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\001\002\000\026\003\uffc8\016\uffc8\021" +
    "\uffc8\023\uffc8\025\uffc8\026\uffc8\045\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\001\002\000\026\003\uffc5\016\uffc5\021\uffc5\023" +
    "\uffc5\025\uffc5\026\uffc5\045\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\001\002\000\026\003\uffc7\016\uffc7\021\uffc7\023\uffc7\025" +
    "\uffc7\026\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7\001\002" +
    "\000\026\003\uffc2\016\uffc2\021\uffc2\023\uffc2\025\uffc2\026" +
    "\uffc2\045\uffc2\047\uffc2\050\uffc2\051\uffc2\001\002\000\026" +
    "\003\uffc3\016\uffc3\021\uffc3\023\uffc3\025\uffc3\026\uffc3\045" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\001\002\000\030\003\uffcb" +
    "\016\uffcb\021\uffcb\022\112\023\uffcb\025\uffcb\026\uffcb\045" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002\000\026\003\uffc4" +
    "\016\uffc4\021\uffc4\023\uffc4\025\uffc4\026\uffc4\045\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\001\002\000\006\003\uff89\016\uff89" +
    "\001\002\000\026\003\uffc6\016\uffc6\021\uffc6\023\uffc6\025" +
    "\uffc6\026\uffc6\045\uffc6\047\uffc6\050\uffc6\051\uffc6\001\002" +
    "\000\030\023\uffb8\052\104\053\101\054\077\057\100\060" +
    "\106\061\103\062\111\063\102\064\107\065\105\001\002" +
    "\000\004\023\120\001\002\000\006\021\116\023\uffb9\001" +
    "\002\000\006\021\uffb7\023\uffb7\001\002\000\030\023\uffb8" +
    "\052\104\053\101\054\077\057\100\060\106\061\103\062" +
    "\111\063\102\064\107\065\105\001\002\000\004\023\uffba" +
    "\001\002\000\026\003\uffca\016\uffca\021\uffca\023\uffca\025" +
    "\uffca\026\uffca\045\uffca\047\uffca\050\uffca\051\uffca\001\002" +
    "\000\030\003\124\052\104\053\101\054\077\057\100\060" +
    "\106\061\103\062\111\063\102\064\107\065\105\001\002" +
    "\000\026\052\104\053\101\054\077\057\100\060\106\061" +
    "\103\062\111\063\102\064\107\065\105\001\002\000\006" +
    "\003\uff8a\016\uff8a\001\002\000\006\003\uff88\016\uff88\001" +
    "\002\000\006\003\uff8b\016\uff8b\001\002\000\030\022\131" +
    "\052\104\053\101\054\077\057\100\060\106\061\103\062" +
    "\111\063\102\064\107\065\105\001\002\000\032\003\132" +
    "\022\131\052\104\053\101\054\077\057\100\060\106\061" +
    "\103\062\111\063\102\064\107\065\105\001\002\000\006" +
    "\003\167\016\170\001\002\000\030\022\131\052\104\053" +
    "\101\054\077\057\100\060\106\061\103\062\111\063\102" +
    "\064\107\065\105\001\002\000\004\016\147\001\002\000" +
    "\006\003\135\051\136\001\002\000\030\003\140\052\104" +
    "\053\101\054\077\057\100\060\106\061\103\062\111\063" +
    "\102\064\107\065\105\001\002\000\026\052\104\053\101" +
    "\054\077\057\100\060\106\061\103\062\111\063\102\064" +
    "\107\065\105\001\002\000\030\003\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\001\002\000\010\003\uffa0\016\uffa0\023\uffa0" +
    "\001\002\000\010\003\uffa1\016\uffa1\023\uffa1\001\002\000" +
    "\014\003\uffa3\016\uffa3\023\uffa3\025\144\026\142\001\002" +
    "\000\030\022\131\052\104\053\101\054\077\057\100\060" +
    "\106\061\103\062\111\063\102\064\107\065\105\001\002" +
    "\000\010\003\uffa2\016\uffa2\023\uffa2\001\002\000\030\022" +
    "\131\052\104\053\101\054\077\057\100\060\106\061\103" +
    "\062\111\063\102\064\107\065\105\001\002\000\010\003" +
    "\uff9d\016\uff9d\023\uff9d\001\002\000\010\003\uff9e\016\uff9e" +
    "\023\uff9e\001\002\000\004\060\150\001\002\000\006\047" +
    "\155\050\156\001\002\000\004\023\152\001\002\000\026" +
    "\005\055\013\052\014\042\015\036\027\064\031\041\033" +
    "\046\037\045\043\043\060\051\001\002\000\004\030\154" +
    "\001\002\000\042\005\uff93\013\uff93\014\uff93\015\uff93\020" +
    "\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\035\uff93" +
    "\036\uff93\037\uff93\041\uff93\043\uff93\060\uff93\001\002\000" +
    "\006\024\162\047\161\001\002\000\004\024\157\001\002" +
    "\000\004\057\160\001\002\000\006\003\uff8c\023\uff8c\001" +
    "\002\000\006\003\uff8e\023\uff8e\001\002\000\004\057\163" +
    "\001\002\000\006\003\uff8d\023\uff8d\001\002\000\004\023" +
    "\165\001\002\000\014\003\uffa5\016\uffa5\023\uffa5\025\144" +
    "\026\142\001\002\000\010\003\uffa4\016\uffa4\023\uffa4\001" +
    "\002\000\004\060\150\001\002\000\006\003\171\060\150" +
    "\001\002\000\004\023\203\001\002\000\006\003\174\023" +
    "\173\001\002\000\030\003\177\005\055\013\052\014\042" +
    "\015\036\027\064\031\041\033\046\037\045\043\043\060" +
    "\051\001\002\000\026\005\055\013\052\014\042\015\036" +
    "\027\064\031\041\033\046\037\045\043\043\060\051\001" +
    "\002\000\004\030\176\001\002\000\042\005\uff90\013\uff90" +
    "\014\uff90\015\uff90\020\uff90\027\uff90\030\uff90\031\uff90\032" +
    "\uff90\033\uff90\035\uff90\036\uff90\037\uff90\041\uff90\043\uff90" +
    "\060\uff90\001\002\000\004\030\202\001\002\000\004\030" +
    "\201\001\002\000\042\005\uff97\013\uff97\014\uff97\015\uff97" +
    "\020\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\035" +
    "\uff97\036\uff97\037\uff97\041\uff97\043\uff97\060\uff97\001\002" +
    "\000\042\005\uff8f\013\uff8f\014\uff8f\015\uff8f\020\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\035\uff8f\036\uff8f" +
    "\037\uff8f\041\uff8f\043\uff8f\060\uff8f\001\002\000\026\005" +
    "\055\013\052\014\042\015\036\027\064\031\041\033\046" +
    "\037\045\043\043\060\051\001\002\000\004\030\205\001" +
    "\002\000\042\005\uff91\013\uff91\014\uff91\015\uff91\020\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\035\uff91\036" +
    "\uff91\037\uff91\041\uff91\043\uff91\060\uff91\001\002\000\004" +
    "\023\207\001\002\000\026\005\055\013\052\014\042\015" +
    "\036\027\064\031\041\033\046\037\045\043\043\060\051" +
    "\001\002\000\004\030\211\001\002\000\042\005\uff92\013" +
    "\uff92\014\uff92\015\uff92\020\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\033\uff92\035\uff92\036\uff92\037\uff92\041\uff92\043" +
    "\uff92\060\uff92\001\002\000\004\016\213\001\002\000\004" +
    "\060\150\001\002\000\004\023\215\001\002\000\026\005" +
    "\055\013\052\014\042\015\036\027\064\031\041\033\046" +
    "\037\045\043\043\060\051\001\002\000\004\030\217\001" +
    "\002\000\042\005\uff94\013\uff94\014\uff94\015\uff94\020\uff94" +
    "\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\035\uff94\036" +
    "\uff94\037\uff94\041\uff94\043\uff94\060\uff94\001\002\000\030" +
    "\022\131\052\104\053\101\054\077\057\100\060\106\061" +
    "\103\062\111\063\102\064\107\065\105\001\002\000\004" +
    "\016\222\001\002\000\004\060\150\001\002\000\004\023" +
    "\224\001\002\000\026\005\055\013\052\014\042\015\036" +
    "\027\064\031\041\033\046\037\045\043\043\060\051\001" +
    "\002\000\004\030\226\001\002\000\042\005\uff95\013\uff95" +
    "\014\uff95\015\uff95\020\uff95\027\uff95\030\uff95\031\uff95\032" +
    "\uff95\033\uff95\035\uff95\036\uff95\037\uff95\041\uff95\043\uff95" +
    "\060\uff95\001\002\000\004\016\230\001\002\000\030\022" +
    "\131\052\104\053\101\054\077\057\100\060\106\061\103" +
    "\062\111\063\102\064\107\065\105\001\002\000\004\016" +
    "\232\001\002\000\004\060\150\001\002\000\004\023\234" +
    "\001\002\000\026\005\055\013\052\014\042\015\036\027" +
    "\064\031\041\033\046\037\045\043\043\060\051\001\002" +
    "\000\004\030\236\001\002\000\042\005\uff96\013\uff96\014" +
    "\uff96\015\uff96\020\uff96\027\uff96\030\uff96\031\uff96\032\uff96" +
    "\033\uff96\035\uff96\036\uff96\037\uff96\041\uff96\043\uff96\060" +
    "\uff96\001\002\000\042\005\uffda\013\uffda\014\uffda\015\uffda" +
    "\020\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\035" +
    "\uffda\036\uffda\037\uffda\041\uffda\043\uffda\060\uffda\001\002" +
    "\000\006\003\244\060\051\001\002\000\004\060\051\001" +
    "\002\000\004\016\243\001\002\000\042\005\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\020\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\035\uffdc\036\uffdc\037\uffdc\041\uffdc\043\uffdc" +
    "\060\uffdc\001\002\000\004\016\247\001\002\000\004\016" +
    "\246\001\002\000\042\005\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\020\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\041\uffdd\043\uffdd\060\uffdd\001\002" +
    "\000\042\005\uffdb\013\uffdb\014\uffdb\015\uffdb\020\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\041\uffdb\043\uffdb\060\uffdb\001\002\000\016\020" +
    "\uffe8\030\uffe8\032\uffe8\035\uffe8\036\uffe8\041\uffe8\001\002" +
    "\000\030\022\254\052\104\053\101\054\077\057\100\060" +
    "\106\061\103\062\111\063\102\064\107\065\105\001\002" +
    "\000\006\023\272\047\263\001\002\000\016\003\uffd1\016" +
    "\uffd1\021\uffd1\023\uffd1\047\uffd1\050\270\001\002\000\030" +
    "\022\254\052\104\053\101\054\077\057\100\060\106\061" +
    "\103\062\111\063\102\064\107\065\105\001\002\000\016" +
    "\003\uffcf\016\uffcf\021\uffcf\023\uffcf\047\uffcf\050\uffcf\001" +
    "\002\000\010\023\257\047\uffcd\050\uffcd\001\002\000\004" +
    "\016\260\001\002\000\042\005\uff83\013\uff83\014\uff83\015" +
    "\uff83\020\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83" +
    "\035\uff83\036\uff83\037\uff83\041\uff83\043\uff83\060\uff83\001" +
    "\002\000\006\023\264\047\263\001\002\000\016\003\uffcd" +
    "\016\uffcd\021\uffcd\023\uffcd\047\uffcd\050\uffcd\001\002\000" +
    "\030\022\uff7b\052\uff7b\053\uff7b\054\uff7b\057\uff7b\060\uff7b" +
    "\061\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b\001\002\000" +
    "\016\003\uffce\016\uffce\021\uffce\023\uffce\047\uffce\050\uffce" +
    "\001\002\000\030\022\254\052\104\053\101\054\077\057" +
    "\100\060\106\061\103\062\111\063\102\064\107\065\105" +
    "\001\002\000\016\003\uffd2\016\uffd2\021\uffd2\023\uffd2\047" +
    "\uffd2\050\270\001\002\000\030\022\254\052\104\053\101" +
    "\054\077\057\100\060\106\061\103\062\111\063\102\064" +
    "\107\065\105\001\002\000\030\022\uff7a\052\uff7a\053\uff7a" +
    "\054\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a\064" +
    "\uff7a\065\uff7a\001\002\000\016\003\uffd0\016\uffd0\021\uffd0" +
    "\023\uffd0\047\uffd0\050\uffd0\001\002\000\004\016\273\001" +
    "\002\000\042\005\uff81\013\uff81\014\uff81\015\uff81\020\uff81" +
    "\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\035\uff81\036" +
    "\uff81\037\uff81\041\uff81\043\uff81\060\uff81\001\002\000\030" +
    "\022\254\052\104\053\101\054\077\057\100\060\106\061" +
    "\103\062\111\063\102\064\107\065\105\001\002\000\010" +
    "\003\uffd6\016\uffd6\021\uffd6\001\002\000\010\003\uffd5\016" +
    "\uffd5\021\uffd5\001\002\000\012\003\uffd3\016\uffd3\021\uffd3" +
    "\047\263\001\002\000\030\022\131\052\104\053\101\054" +
    "\077\057\100\060\106\061\103\062\111\063\102\064\107" +
    "\065\105\001\002\000\032\003\303\022\131\052\104\053" +
    "\101\054\077\057\100\060\106\061\103\062\111\063\102" +
    "\064\107\065\105\001\002\000\006\003\307\023\310\001" +
    "\002\000\004\023\304\001\002\000\026\005\055\013\052" +
    "\014\042\015\036\027\064\031\041\033\046\037\045\043" +
    "\043\060\051\001\002\000\004\036\306\001\002\000\042" +
    "\005\uffa8\013\uffa8\014\uffa8\015\uffa8\020\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\041\uffa8\043\uffa8\060\uffa8\001\002\000\026\005\055\013" +
    "\052\014\042\015\036\027\064\031\041\033\046\037\045" +
    "\043\043\060\051\001\002\000\026\005\055\013\052\014" +
    "\042\015\036\027\064\031\041\033\046\037\045\043\043" +
    "\060\051\001\002\000\006\035\313\036\314\001\002\000" +
    "\004\036\316\001\002\000\026\005\055\013\052\014\042" +
    "\015\036\027\064\031\041\033\046\037\045\043\043\060" +
    "\051\001\002\000\042\005\uffab\013\uffab\014\uffab\015\uffab" +
    "\020\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\035" +
    "\uffab\036\uffab\037\uffab\041\uffab\043\uffab\060\uffab\001\002" +
    "\000\004\036\uffa6\001\002\000\042\005\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\020\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\035\uffaa\036\uffaa\037\uffaa\041\uffaa\043\uffaa\060" +
    "\uffaa\001\002\000\004\036\320\001\002\000\042\005\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\020\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\035\uffa7\036\uffa7\037\uffa7\041\uffa7" +
    "\043\uffa7\060\uffa7\001\002\000\004\023\322\001\002\000" +
    "\026\005\055\013\052\014\042\015\036\027\064\031\041" +
    "\033\046\037\045\043\043\060\051\001\002\000\004\036" +
    "\324\001\002\000\042\005\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\020\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\041\uffa9\043\uffa9\060\uffa9\001\002" +
    "\000\004\060\351\001\002\000\006\003\330\060\327\001" +
    "\002\000\006\003\344\023\343\001\002\000\004\023\331" +
    "\001\002\000\026\052\104\053\101\054\077\057\100\060" +
    "\106\061\103\062\111\063\102\064\107\065\105\001\002" +
    "\000\030\040\uffad\052\104\053\101\054\077\057\100\060" +
    "\106\061\103\062\111\063\102\064\107\065\105\001\002" +
    "\000\004\045\336\001\002\000\004\040\335\001\002\000" +
    "\042\005\uffb0\013\uffb0\014\uffb0\015\uffb0\020\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\041\uffb0\043\uffb0\060\uffb0\001\002\000\026\005\055" +
    "\013\052\014\042\015\036\027\064\031\041\033\046\037" +
    "\045\043\043\060\051\001\002\000\004\041\340\001\002" +
    "\000\004\016\341\001\002\000\030\040\uffac\052\uffac\053" +
    "\uffac\054\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac" +
    "\064\uffac\065\uffac\001\002\000\004\040\uffae\001\002\000" +
    "\026\052\104\053\101\054\077\057\100\060\106\061\103" +
    "\062\111\063\102\064\107\065\105\001\002\000\026\052" +
    "\104\053\101\054\077\057\100\060\106\061\103\062\111" +
    "\063\102\064\107\065\105\001\002\000\004\040\346\001" +
    "\002\000\042\005\uffaf\013\uffaf\014\uffaf\015\uffaf\020\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\041\uffaf\043\uffaf\060\uffaf\001\002\000\004" +
    "\040\350\001\002\000\042\005\uffb2\013\uffb2\014\uffb2\015" +
    "\uffb2\020\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\041\uffb2\043\uffb2\060\uffb2\001" +
    "\002\000\004\023\352\001\002\000\026\052\104\053\101" +
    "\054\077\057\100\060\106\061\103\062\111\063\102\064" +
    "\107\065\105\001\002\000\004\040\354\001\002\000\042" +
    "\005\uffb1\013\uffb1\014\uffb1\015\uffb1\020\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\041\uffb1\043\uffb1\060\uffb1\001\002\000\004\060\051\001" +
    "\002\000\004\060\051\001\002\000\004\016\uffd7\001\002" +
    "\000\004\016\uffd9\001\002\000\004\016\365\001\002\000" +
    "\006\003\363\016\364\001\002\000\042\005\uffde\013\uffde" +
    "\014\uffde\015\uffde\020\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\035\uffde\036\uffde\037\uffde\041\uffde\043\uffde" +
    "\060\uffde\001\002\000\042\005\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\020\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\041\uffe0\043\uffe0\060\uffe0\001" +
    "\002\000\042\005\uffdf\013\uffdf\014\uffdf\015\uffdf\020\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\041\uffdf\043\uffdf\060\uffdf\001\002\000\030" +
    "\022\254\052\104\053\101\054\077\057\100\060\106\061" +
    "\103\062\111\063\102\064\107\065\105\001\002\000\006" +
    "\023\373\047\263\001\002\000\010\023\371\047\uffcd\050" +
    "\uffcd\001\002\000\004\016\372\001\002\000\042\005\uff82" +
    "\013\uff82\014\uff82\015\uff82\020\uff82\027\uff82\030\uff82\031" +
    "\uff82\032\uff82\033\uff82\035\uff82\036\uff82\037\uff82\041\uff82" +
    "\043\uff82\060\uff82\001\002\000\004\016\374\001\002\000" +
    "\042\005\uff80\013\uff80\014\uff80\015\uff80\020\uff80\027\uff80" +
    "\030\uff80\031\uff80\032\uff80\033\uff80\035\uff80\036\uff80\037" +
    "\uff80\041\uff80\043\uff80\060\uff80\001\002\000\030\022\131" +
    "\052\104\053\101\054\077\057\100\060\106\061\103\062" +
    "\111\063\102\064\107\065\105\001\002\000\032\003\u0100" +
    "\022\131\052\104\053\101\054\077\057\100\060\106\061" +
    "\103\062\111\063\102\064\107\065\105\001\002\000\006" +
    "\003\u0104\023\u0105\001\002\000\004\023\u0101\001\002\000" +
    "\026\005\055\013\052\014\042\015\036\027\064\031\041" +
    "\033\046\037\045\043\043\060\051\001\002\000\004\032" +
    "\u0103\001\002\000\042\005\uff9a\013\uff9a\014\uff9a\015\uff9a" +
    "\020\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\041\uff9a\043\uff9a\060\uff9a\001\002" +
    "\000\026\005\055\013\052\014\042\015\036\027\064\031" +
    "\041\033\046\037\045\043\043\060\051\001\002\000\030" +
    "\003\u0106\005\055\013\052\014\042\015\036\027\064\031" +
    "\041\033\046\037\045\043\043\060\051\001\002\000\004" +
    "\032\u0109\001\002\000\004\032\u0108\001\002\000\042\005" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\020\uff9c\027\uff9c\030\uff9c" +
    "\031\uff9c\032\uff9c\033\uff9c\035\uff9c\036\uff9c\037\uff9c\041" +
    "\uff9c\043\uff9c\060\uff9c\001\002\000\042\005\uff98\013\uff98" +
    "\014\uff98\015\uff98\020\uff98\027\uff98\030\uff98\031\uff98\032" +
    "\uff98\033\uff98\035\uff98\036\uff98\037\uff98\041\uff98\043\uff98" +
    "\060\uff98\001\002\000\004\032\u010b\001\002\000\042\005" +
    "\uff99\013\uff99\014\uff99\015\uff99\020\uff99\027\uff99\030\uff99" +
    "\031\uff99\032\uff99\033\uff99\035\uff99\036\uff99\037\uff99\041" +
    "\uff99\043\uff99\060\uff99\001\002\000\004\023\u010d\001\002" +
    "\000\026\005\055\013\052\014\042\015\036\027\064\031" +
    "\041\033\046\037\045\043\043\060\051\001\002\000\004" +
    "\032\u010f\001\002\000\042\005\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\020\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\035\uff9b\036\uff9b\037\uff9b\041\uff9b\043\uff9b\060\uff9b\001" +
    "\002\000\026\052\104\053\101\054\077\057\100\060\106" +
    "\061\103\062\111\063\102\064\107\065\105\001\002\000" +
    "\030\003\u0112\052\104\053\101\054\077\057\100\060\106" +
    "\061\103\062\111\063\102\064\107\065\105\001\002\000" +
    "\004\023\u0118\001\002\000\006\003\u0114\023\u0115\001\002" +
    "\000\004\016\u0117\001\002\000\004\003\u0116\001\002\000" +
    "\042\005\uff7c\013\uff7c\014\uff7c\015\uff7c\020\uff7c\027\uff7c" +
    "\030\uff7c\031\uff7c\032\uff7c\033\uff7c\035\uff7c\036\uff7c\037" +
    "\uff7c\041\uff7c\043\uff7c\060\uff7c\001\002\000\042\005\uff7d" +
    "\013\uff7d\014\uff7d\015\uff7d\020\uff7d\027\uff7d\030\uff7d\031" +
    "\uff7d\032\uff7d\033\uff7d\035\uff7d\036\uff7d\037\uff7d\041\uff7d" +
    "\043\uff7d\060\uff7d\001\002\000\004\016\u0119\001\002\000" +
    "\042\005\uff7e\013\uff7e\014\uff7e\015\uff7e\020\uff7e\027\uff7e" +
    "\030\uff7e\031\uff7e\032\uff7e\033\uff7e\035\uff7e\036\uff7e\037" +
    "\uff7e\041\uff7e\043\uff7e\060\uff7e\001\002\000\004\023\u011b" +
    "\001\002\000\004\016\u011c\001\002\000\042\005\uff7f\013" +
    "\uff7f\014\uff7f\015\uff7f\020\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\033\uff7f\035\uff7f\036\uff7f\037\uff7f\041\uff7f\043" +
    "\uff7f\060\uff7f\001\002\000\026\052\104\053\101\054\077" +
    "\057\100\060\106\061\103\062\111\063\102\064\107\065" +
    "\105\001\002\000\026\052\104\053\101\054\077\057\100" +
    "\060\106\061\103\062\111\063\102\064\107\065\105\001" +
    "\002\000\006\021\u0120\023\u0121\001\002\000\006\003\u0123" +
    "\023\u0124\001\002\000\004\016\u0122\001\002\000\042\005" +
    "\uff87\013\uff87\014\uff87\015\uff87\020\uff87\027\uff87\030\uff87" +
    "\031\uff87\032\uff87\033\uff87\035\uff87\036\uff87\037\uff87\041" +
    "\uff87\043\uff87\060\uff87\001\002\000\004\016\u0126\001\002" +
    "\000\004\003\u0125\001\002\000\042\005\uff84\013\uff84\014" +
    "\uff84\015\uff84\020\uff84\027\uff84\030\uff84\031\uff84\032\uff84" +
    "\033\uff84\035\uff84\036\uff84\037\uff84\041\uff84\043\uff84\060" +
    "\uff84\001\002\000\042\005\uff85\013\uff85\014\uff85\015\uff85" +
    "\020\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\035" +
    "\uff85\036\uff85\037\uff85\041\uff85\043\uff85\060\uff85\001\002" +
    "\000\004\021\u0128\001\002\000\004\023\u0129\001\002\000" +
    "\004\016\u012a\001\002\000\042\005\uff86\013\uff86\014\uff86" +
    "\015\uff86\020\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\035\uff86\036\uff86\037\uff86\041\uff86\043\uff86\060\uff86" +
    "\001\002\000\010\003\uffea\021\uffea\023\uffea\001\002\000" +
    "\010\003\uffe9\021\uffe9\023\uffe9\001\002\000\024\003\uffeb" +
    "\004\025\007\021\010\023\023\uffeb\046\024\055\022\056" +
    "\016\066\020\001\002\000\006\003\uffed\023\uffed\001\002" +
    "\000\004\002\uffff\001\002\000\006\002\ufff3\011\u0131\001" +
    "\002\000\022\003\u0133\004\025\007\021\010\023\046\024" +
    "\055\022\056\016\066\020\001\002\000\006\003\u013c\060" +
    "\u013b\001\002\000\004\060\u0134\001\002\000\004\022\u0135" +
    "\001\002\000\022\004\025\007\021\010\023\023\uffeb\046" +
    "\024\055\022\056\016\066\020\001\002\000\004\023\u0137" +
    "\001\002\000\004\017\u0138\001\002\000\026\005\055\013" +
    "\052\014\042\015\036\027\064\031\041\033\046\037\045" +
    "\043\043\060\051\001\002\000\004\020\u013a\001\002\000" +
    "\006\002\ufff0\011\ufff0\001\002\000\006\003\u0143\022\u0144" +
    "\001\002\000\004\022\u013d\001\002\000\022\004\025\007" +
    "\021\010\023\023\uffeb\046\024\055\022\056\016\066\020" +
    "\001\002\000\004\023\u013f\001\002\000\004\017\u0140\001" +
    "\002\000\026\005\055\013\052\014\042\015\036\027\064" +
    "\031\041\033\046\037\045\043\043\060\051\001\002\000" +
    "\004\020\u0142\001\002\000\006\002\ufff1\011\ufff1\001\002" +
    "\000\022\004\025\007\021\010\023\023\uffeb\046\024\055" +
    "\022\056\016\066\020\001\002\000\024\003\uffeb\004\025" +
    "\007\021\010\023\023\uffeb\046\024\055\022\056\016\066" +
    "\020\001\002\000\006\003\u0146\023\u0147\001\002\000\004" +
    "\017\u014b\001\002\000\004\017\u0148\001\002\000\026\005" +
    "\055\013\052\014\042\015\036\027\064\031\041\033\046" +
    "\037\045\043\043\060\051\001\002\000\004\020\u014a\001" +
    "\002\000\006\002\ufff2\011\ufff2\001\002\000\026\005\055" +
    "\013\052\014\042\015\036\027\064\031\041\033\046\037" +
    "\045\043\043\060\051\001\002\000\004\020\u014d\001\002" +
    "\000\006\002\uffee\011\uffee\001\002\000\004\023\u014f\001" +
    "\002\000\004\017\u0150\001\002\000\026\005\055\013\052" +
    "\014\042\015\036\027\064\031\041\033\046\037\045\043" +
    "\043\060\051\001\002\000\004\020\u0152\001\002\000\006" +
    "\002\uffef\011\uffef\001\002\000\004\002\ufff4\001\002\000" +
    "\004\002\ufffd\001\002\000\010\003\u015f\012\u0160\060\u015e" +
    "\001\002\000\004\012\u0157\001\002\000\004\022\u0158\001" +
    "\002\000\022\004\025\007\021\010\023\023\uffeb\046\024" +
    "\055\022\056\016\066\020\001\002\000\004\023\u015a\001" +
    "\002\000\004\017\u015b\001\002\000\026\005\055\013\052" +
    "\014\042\015\036\027\064\031\041\033\046\037\045\043" +
    "\043\060\051\001\002\000\004\020\u015d\001\002\000\006" +
    "\002\ufffa\011\ufffa\001\002\000\004\022\u0170\001\002\000" +
    "\004\022\u016a\001\002\000\004\022\u0161\001\002\000\022" +
    "\004\025\007\021\010\023\023\uffeb\046\024\055\022\056" +
    "\016\066\020\001\002\000\004\023\u0163\001\002\000\006" +
    "\003\u0165\017\u0164\001\002\000\026\005\055\013\052\014" +
    "\042\015\036\027\064\031\041\033\046\037\045\043\043" +
    "\060\051\001\002\000\026\005\055\013\052\014\042\015" +
    "\036\027\064\031\041\033\046\037\045\043\043\060\051" +
    "\001\002\000\004\020\u0167\001\002\000\006\002\ufff8\011" +
    "\ufff8\001\002\000\004\020\u0169\001\002\000\006\002\ufffc" +
    "\011\ufffc\001\002\000\022\004\025\007\021\010\023\023" +
    "\uffeb\046\024\055\022\056\016\066\020\001\002\000\004" +
    "\023\u016c\001\002\000\004\017\u016d\001\002\000\026\005" +
    "\055\013\052\014\042\015\036\027\064\031\041\033\046" +
    "\037\045\043\043\060\051\001\002\000\004\020\u016f\001" +
    "\002\000\006\002\ufff9\011\ufff9\001\002\000\022\004\025" +
    "\007\021\010\023\023\uffeb\046\024\055\022\056\016\066" +
    "\020\001\002\000\004\023\u0172\001\002\000\004\016\u0173" +
    "\001\002\000\006\003\ufff5\011\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0171\000\012\002\010\003\004\004\007\005\006\001" +
    "\001\000\004\016\u0154\001\001\000\002\001\001\000\014" +
    "\002\u0153\003\004\004\007\005\006\016\016\001\001\000" +
    "\006\003\012\004\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\u012e\007\u012f\001" +
    "\001\000\004\016\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\027\013" +
    "\031\016\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\014\052\015" +
    "\064\017\036\020\047\021\053\022\061\023\062\024\057" +
    "\025\043\026\060\030\055\033\034\034\056\050\037\051" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\274\001\001\000\002\001\001\000\040" +
    "\014\052\015\247\017\036\020\047\021\053\022\061\023" +
    "\062\024\057\025\043\026\060\030\055\033\034\034\056" +
    "\050\037\051\046\001\001\000\002\001\001\000\004\016" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\226\001\001\000\004\035\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\112\011\113\027\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\116\011\113\027\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\124\001\001\000\004" +
    "\027\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\132\032\211\001\001\000\006" +
    "\027\132\032\127\001\001\000\002\001\001\000\006\027" +
    "\132\032\163\001\001\000\002\001\001\000\004\047\133" +
    "\001\001\000\004\027\140\001\001\000\004\027\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\142\001\001\000\006\027\132\032\145\001" +
    "\001\000\002\001\001\000\006\027\132\032\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\014\052" +
    "\015\152\017\036\020\047\021\053\022\061\023\062\024" +
    "\057\025\043\026\060\030\055\033\034\034\056\050\037" +
    "\051\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\165\001\001\000\002" +
    "\001\001\000\004\036\205\001\001\000\004\036\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\014\052" +
    "\015\177\017\036\020\047\021\053\022\061\023\062\024" +
    "\057\025\043\026\060\030\055\033\034\034\056\050\037" +
    "\051\046\001\001\000\040\014\052\015\174\017\036\020" +
    "\047\021\053\022\061\023\062\024\057\025\043\026\060" +
    "\030\055\033\034\034\056\050\037\051\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\014" +
    "\052\015\203\017\036\020\047\021\053\022\061\023\062" +
    "\024\057\025\043\026\060\030\055\033\034\034\056\050" +
    "\037\051\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\014\052\015\207\017\036\020" +
    "\047\021\053\022\061\023\062\024\057\025\043\026\060" +
    "\030\055\033\034\034\056\050\037\051\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\213\001\001\000\002\001\001\000\040\014\052\015" +
    "\215\017\036\020\047\021\053\022\061\023\062\024\057" +
    "\025\043\026\060\030\055\033\034\034\056\050\037\051" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\132\032\220\001\001\000\002\001\001\000\004\036" +
    "\222\001\001\000\002\001\001\000\040\014\052\015\224" +
    "\017\036\020\047\021\053\022\061\023\062\024\057\025" +
    "\043\026\060\030\055\033\034\034\056\050\037\051\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\132\032\230\001\001\000\002\001\001" +
    "\000\004\036\232\001\001\000\002\001\001\000\040\014" +
    "\052\015\234\017\036\020\047\021\053\022\061\023\062" +
    "\024\057\025\043\026\060\030\055\033\034\034\056\050" +
    "\037\051\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\043\026\244\001\001\000" +
    "\006\025\043\026\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\255" +
    "\040\251\041\252\042\254\001\001\000\004\045\264\001" +
    "\001\000\004\046\266\001\001\000\012\027\261\040\260" +
    "\041\252\042\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\261\041\265\042\254\001\001\000\004" +
    "\046\266\001\001\000\006\027\261\042\270\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\027\261\040\276\041\252\042\254\043" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\264\001\001\000\006\027\132\032\320\001\001\000" +
    "\006\027\132\032\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\014\052\015\304\017\036\020\047\021" +
    "\053\022\061\023\062\024\057\025\043\026\060\030\055" +
    "\033\034\034\056\050\037\051\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\014\052\015\316\017\036" +
    "\020\047\021\053\022\061\023\062\024\057\025\043\026" +
    "\060\030\055\033\034\034\056\050\037\051\046\001\001" +
    "\000\040\014\052\015\310\017\036\020\047\021\053\022" +
    "\061\023\062\024\057\025\043\026\060\030\055\033\034" +
    "\034\056\050\037\051\046\001\001\000\004\031\311\001" +
    "\001\000\002\001\001\000\040\014\052\015\314\017\036" +
    "\020\047\021\053\022\061\023\062\024\057\025\043\026" +
    "\060\030\055\033\034\034\056\050\037\051\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\014\052\015\322\017\036\020\047\021\053\022\061\023" +
    "\062\024\057\025\043\026\060\030\055\033\034\034\056" +
    "\050\037\051\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\027\332\052\333\053\331\001" +
    "\001\000\010\027\332\052\341\053\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\014" +
    "\052\015\336\017\036\020\047\021\053\022\061\023\062" +
    "\024\057\025\043\026\060\030\055\033\034\034\056\050" +
    "\037\051\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\332\052" +
    "\346\053\331\001\001\000\010\027\332\052\344\053\331" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\027\332" +
    "\052\352\053\331\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\043\026\357\001\001\000\006\025\043" +
    "\026\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\027\367\040\366\041" +
    "\252\042\254\001\001\000\004\045\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\132\032\u010b\001\001" +
    "\000\006\027\132\032\376\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\014\052\015\u0101\017\036\020\047" +
    "\021\053\022\061\023\062\024\057\025\043\026\060\030" +
    "\055\033\034\034\056\050\037\051\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\014\052\015\u0109\017" +
    "\036\020\047\021\053\022\061\023\062\024\057\025\043" +
    "\026\060\030\055\033\034\034\056\050\037\051\046\001" +
    "\001\000\040\014\052\015\u0106\017\036\020\047\021\053" +
    "\022\061\023\062\024\057\025\043\026\060\030\055\033" +
    "\034\034\056\050\037\051\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\014\052\015\u010d\017\036\020\047\021\053\022\061\023" +
    "\062\024\057\025\043\026\060\030\055\033\034\034\056" +
    "\050\037\051\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u0119\001\001\000\004\027\u0112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\u0126\001\001\000\004" +
    "\027\u011e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\027\013" +
    "\u012d\016\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u0152\007\u012f\001\001\000\004\016\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\027\013\u0135\016\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\014\052\015\u0138\017\036" +
    "\020\047\021\053\022\061\023\062\024\057\025\043\026" +
    "\060\030\055\033\034\034\056\050\037\051\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\027\013\u013d\016\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\014\052\015" +
    "\u0140\017\036\020\047\021\053\022\061\023\062\024\057" +
    "\025\043\026\060\030\055\033\034\034\056\050\037\051" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\027\013\u014d\016\030\001\001\000\010\012\027\013" +
    "\u0144\016\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\014\052\015\u0148\017\036\020" +
    "\047\021\053\022\061\023\062\024\057\025\043\026\060" +
    "\030\055\033\034\034\056\050\037\051\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\014\052\015\u014b" +
    "\017\036\020\047\021\053\022\061\023\062\024\057\025" +
    "\043\026\060\030\055\033\034\034\056\050\037\051\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\014\052\015\u0150\017\036" +
    "\020\047\021\053\022\061\023\062\024\057\025\043\026" +
    "\060\030\055\033\034\034\056\050\037\051\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\027\013\u0158\016\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\014\052\015\u015b" +
    "\017\036\020\047\021\053\022\061\023\062\024\057\025" +
    "\043\026\060\030\055\033\034\034\056\050\037\051\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\027" +
    "\013\u0161\016\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\014\052\015\u0167\017\036\020\047\021\053" +
    "\022\061\023\062\024\057\025\043\026\060\030\055\033" +
    "\034\034\056\050\037\051\046\001\001\000\040\014\052" +
    "\015\u0165\017\036\020\047\021\053\022\061\023\062\024" +
    "\057\025\043\026\060\030\055\033\034\034\056\050\037" +
    "\051\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\027\013\u016a" +
    "\016\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\014\052\015\u016d\017\036\020\047\021\053\022\061" +
    "\023\062\024\057\025\043\026\060\030\055\033\034\034" +
    "\056\050\037\051\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\027\013\u0170\016\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public MyNode root = null;

    ArrayList<StringBuilder> errores = new ArrayList();
    ArrayList<StringBuilder> errores3 = new ArrayList();
    ArrayList<String> errores2 = new ArrayList();

    @Override
    public void report_error(String message, Object info) {
System.out.println(info +"Esto es la info");
    	StringBuilder m = new StringBuilder("Syntax Error");
		if (info instanceof java_cup.runtime.Symbol) {

			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
			if (s.sym == 0) {
				m.append(" : Part of declaration (main or function) is missing");
			}else{
				m.append(" Unexpected token: "+ getToken(s.sym) +" |"+message);
			}
		}
                errores.add(m);
       
    }

    public void addError(String message, Object info) {


    	StringBuilder m = new StringBuilder("Syntax Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
			if (s.sym == 0) {
				m.append(" : Part of declaration (main or function) is missing");
			}else{
				m.append(" Unexpected token: "+ getToken(s.sym) +" |"+message);
			}
		}
        
                errores3.add(m);
    }
    public void addError(String message) {
            System.err.println(message);
                errores2.add(message);
    }


    private String getToken(int id) {
        try {
	        Field [] field = sym.class.getFields();
	        for (int i = 0; i < field.length; i++) {
	          	if (field[i].getInt(null) == id) {
	                return field[i].getName();
	            }
	            
	        }
        } catch (Exception e) {          
        }
        return "UNKOWN";
    }
    

    public void report_fatal_error(String message, Object info) {
		//report_error(" Could not recover", info);
	}
    
    @Override
    public int error_sync_size(){
        return 2;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // opmultdiv ::= MULTDIV 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				if (((String)op).equals("*")) {
					MyNode nuevoNodo = new MyNode("*");
                                        RESULT = nuevoNodo;
				}else {
					MyNode nuevoNodo = new MyNode("/");
                                        RESULT = nuevoNodo;
				}
                              
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opmultdiv",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // opsum ::= SUMRES 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				if (((String)op).equals("+")) {
                                        MyNode nuevoNodo = new MyNode("+");
                                        RESULT = nuevoNodo;
                               
				}else{
                                        MyNode nuevoNodo = new MyNode("-");
                                        RESULT = nuevoNodo;
                                   
				}
                                
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opsum",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // printers ::= writers PARIZQ value PARDER error 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
				parser.addError("MISSING/ERROR NEAR ENDLINE TOKEN '#'");
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("printers",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // printers ::= writers PARIZQ value error DELIM 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				parser.addError("MISSING TOKEN: PARDER PRINTERS");
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("printers",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // printers ::= writers PARIZQ error PARDER DELIM 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				parser.addError("MISSING TOKEN: VALUE PRINTERS");
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("printers",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // printers ::= writers error value PARDER DELIM 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				parser.addError("MISSING TOKEN: PARIZQ PRINTER");
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("printers",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // printers ::= WRITELN PARIZQ arithmeticExp PARDER DELIM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                            MyNode nuevoNodo = new MyNode("WRITELN");
                                MyNode temp =((MyNode)e);
                                 nuevoNodo.addHijo(temp);
                                    RESULT = nuevoNodo;

                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("printers",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // printers ::= WRITE PARIZQ arithmeticExp PARDER DELIM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				MyNode nuevoNodo = new MyNode("WRITE");
                                MyNode temp =((MyNode)e);
                                nuevoNodo.addHijo(temp);
                                RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("printers",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // printers ::= WRITELN PARIZQ value PARDER DELIM 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                            MyNode nuevoNodo = new MyNode("WRITELN");
                                MyNode temp =((MyNode)v);
                                 nuevoNodo.addHijo(temp);
                                    RESULT = nuevoNodo;

                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("printers",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // printers ::= WRITE PARIZQ value PARDER DELIM 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				MyNode nuevoNodo = new MyNode("WRITE");
                                MyNode temp =((MyNode)v);
                                nuevoNodo.addHijo(temp);
                                RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("printers",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // scanners ::= READ PARIZQ value COMMA PARDER error 
            {
              Object RESULT =null;
		
				parser.addError("MISSING TOKEN DELIM '#' SCANNER");
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("scanners",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // scanners ::= READ PARIZQ value COMMA error DELIM 
            {
              Object RESULT =null;
		
				parser.addError("MISSING TOKEN PARDER SCANNER");
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("scanners",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // scanners ::= READ error value COMMA PARDER DELIM 
            {
              Object RESULT =null;
		
				parser.addError("MISSING TOKEN PARIZQ SCANNER'");
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("scanners",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // scanners ::= READ PARIZQ value PARDER DELIM 
            {
              Object RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object sf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                                    MyNode nuevoNodo = new MyNode("READ");
                                    MyNode temp =((MyNode)val);
                                    nuevoNodo.addHijo(temp);
                                    RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("scanners",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // inits ::= INT ID AS error 
            {
              Object RESULT =null;
		
			parser.addError("EXPECTED VALUE FOR ID");
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inits",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // inits ::= INT error AS value 
            {
              Object RESULT =null;
		
			parser.addError("EXPECTED TOKEN ID");
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inits",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // inits ::= INT ID error value 
            {
              Object RESULT =null;
		
			parser.addError("MISSING TOKEN 'AS1'");
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inits",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // inits ::= INT ID AS value 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                    MyNode temp =new MyNode(id.toString());
                                    MyNode nuevoNodo = new MyNode(i.toString() + temp.value);
                                    RESULT = nuevoNodo;	
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inits",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // forArthmExp ::= ID MULTDIV IGUAL INTEGER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aESleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aESright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object aES = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES, (String)eq, (int)num);
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("forArthmExp",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // forArthmExp ::= ID SUMRES IGUAL INTEGER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aESleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aESright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object aES = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES, (String)eq, (int)num);
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("forArthmExp",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // forArthmExp ::= ID SUMRES SUMRES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aES1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aES1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object aES1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aES2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aES2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object aES2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				
				if(((String)aES1).equals((String)aES2)){
                                    MyNode app1 = new MyNode(id.toString());
                                    MyNode nuevoNodo = new MyNode(app1.value + aES1.toString() + aES2.toString());
                                    RESULT = nuevoNodo;	
				}else{
                                 parser.addError("EXPECTED SAME SING IN FOR ARTH EXP");
                                 }
				
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("forArthmExp",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // forStatement ::= FOR PARIZQ inits DELIM condition DELIM forArthmExp PARDER error CFOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                                    parser.addError("MISSING/ERROR FOR EXPRESSION");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("forStatement",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // forStatement ::= FOR PARIZQ inits DELIM condition DELIM forArthmExp error expressions CFOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                  parser.addError("MISSING TOKEN: PARDER FOR");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("forStatement",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // forStatement ::= FOR PARIZQ inits DELIM condition DELIM error PARDER expressions CFOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                   parser.addError("MISSING MATHE EXPRESSION INSIDE FOR");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("forStatement",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // forStatement ::= FOR PARIZQ inits DELIM condition error forArthmExp PARDER expressions CFOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                   parser.addError("MISSING DELIM INSIDE FOR");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("forStatement",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // forStatement ::= FOR PARIZQ inits DELIM error DELIM forArthmExp PARDER expressions CFOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                    parser.addError("MISSING CONDITION INSIDE FOR");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("forStatement",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // forStatement ::= FOR PARIZQ inits error condition DELIM forArthmExp PARDER expressions CFOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                 parser.addError("MISSING  DELIM INSIDE FOR");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("forStatement",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // forStatement ::= FOR PARIZQ error DELIM condition DELIM forArthmExp PARDER expressions CFOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                 parser.addError("MISSING INIT IN FOR");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("forStatement",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // forStatement ::= FOR error inits DELIM condition DELIM forArthmExp PARDER expressions CFOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                   parser.addError("MISSING TOKEN: PARIZQ FOR");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("forStatement",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // forStatement ::= FOR PARIZQ inits DELIM condition DELIM forArthmExp PARDER expressions CFOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                    MyNode nuevoNodo = new MyNode("TICFOR");
                                    MyNode hijo = ((MyNode)i);
                                    MyNode hijo2 = ((MyNode)c);
                                    MyNode hijo3 = ((MyNode)aE);

                                    nuevoNodo.addHijo(hijo);
                                    nuevoNodo.addHijo(hijo2);
                                    nuevoNodo.addHijo(hijo3);

                                    if( !(((MyNode) e).value).equals("EXPRESSION")){
                                        MyNode nuevoNodoExp = new MyNode("EXPRESSION");
                                       nuevoNodoExp.addHijo((MyNode) e);
                                       nuevoNodo.addHijo(nuevoNodoExp);

                                    }else{
                                     nuevoNodo.addHijo((MyNode) e);

                                    }


                                    RESULT = nuevoNodo;

				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("forStatement",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // whileStatement ::= WHILE PARIZQ condition PARDER error CWHILE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
					parser.addError("MISSING/ERROR WHILE EXPRESSION");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("whileStatement",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // whileStatement ::= WHILE PARIZQ condition error expressions CWHILE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
					parser.addError("MISSING TOKEN: PARDER WHILE ");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("whileStatement",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // whileStatement ::= WHILE PARIZQ error PARDER expressions CWHILE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
					parser.addError("MISSING WHILE CONDITION");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("whileStatement",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // whileStatement ::= WHILE error condition PARDER expressions CWHILE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
					parser.addError("MISSING TOKEN: PARIZQ WHILE");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("whileStatement",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // whileStatement ::= WHILE PARIZQ condition PARDER expressions CWHILE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                    MyNode nuevoNodo = new MyNode("TICWHILE");
                                    MyNode hijo = ((MyNode) c);
                                    nuevoNodo.addHijo(hijo);

                                    if( !(((MyNode) e).value).equals("EXPRESSION")){
                                        MyNode nuevoNodoExp = new MyNode("EXPRESSION");
                                       nuevoNodoExp.addHijo((MyNode) e);
                                       nuevoNodo.addHijo(nuevoNodoExp);

                                    }else{
                                     nuevoNodo.addHijo((MyNode) e);

                                    }

                                    RESULT = nuevoNodo ;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("whileStatement",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // andOr ::= OR condition 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
			MyNode nuevoNodo = new MyNode((String) o + " " + ((MyNode)c).value);
                        //MyNode hijo = ((MyNode) c);
                        //nuevoNodo.addHijo(hijo);
                        RESULT = nuevoNodo ;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("andOr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // andOr ::= AND condition 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
			MyNode nuevoNodo = new MyNode((String) a + " " + ((MyNode)c).value);
                        //MyNode hijo = ((MyNode) c);
                        //nuevoNodo.addHijo(hijo);
                        RESULT = nuevoNodo ;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("andOr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operators ::= BOOLEX 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

				if (((String)b).equals("<")) {
					RESULT = "<";
				}else if (((String)b).equals(">")) {
					RESULT = ">";
				}else if (((String)b).equals("<=")) {
					RESULT = "<=";
				}else if (((String)b).equals(">=")) {
					RESULT = ">=";
				}else if (((String)b).equals("!=")) {
					RESULT = "!=";
				}else if (((String)b).equals("==")) {
					RESULT = "==";
				}else{
					
				}

			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operators",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condition ::= value error value 
            {
              Object RESULT =null;
		
				parser.addError("EXPECTED CONDITION VALUE");

			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condition ::= value operators error 
            {
              Object RESULT =null;
		
                                System.out.println("HMMMM111111111111111111111");
				parser.addError("EXPECTED FINAL CONDITION VALUE");

			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condition ::= value operators value andOr 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aOleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aOright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object aO = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                MyNode app1 = ((MyNode)v1);
                                MyNode app2 = ((MyNode)v2);
                                MyNode nodoNuevo = new MyNode(app1.value + " " + (String)b + " " + app2.value +" "+ ((MyNode)aO).value);
				RESULT = nodoNuevo;

                                //RESULT = "";
				//Condition r = new Condition(v1,(String)b,v2,aO);
				//RESULT = r;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condition ::= value operators value 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                MyNode app1 = ((MyNode)v1);
                                MyNode app2 = ((MyNode)v2);
                                MyNode nodoNuevo = new MyNode(app1.value + " " + (String)b + " " + app2.value);
				RESULT = nodoNuevo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condition ::= PARIZQ condition PARDER andOr 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aOleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aOright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object aO = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                MyNode nuevoNodo = new MyNode("("+((MyNode) c).value+") "+((MyNode)aO).value);
				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condition ::= PARIZQ condition PARDER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                MyNode nuevoNodo = new MyNode("("+((MyNode) c).value+")");
				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // elseStatement ::= ELSE expressions 
            {
              Object RESULT =null;
		int eSleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object eS = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
					MyNode nodoNuevo = new MyNode("TICELSE :");
                                    if( !(((MyNode) e).value).equals("EXPRESSION")){
                                        MyNode nuevoNodoExp = new MyNode("EXPRESSION");
                                       nuevoNodoExp.addHijo((MyNode) e);
                                       nodoNuevo.addHijo(nuevoNodoExp);

                                    }else{
                                        nodoNuevo.addHijo((MyNode) e);

                                    }
					RESULT = nodoNuevo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("elseStatement",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ifStatement ::= IF PARIZQ condition error expressions CIF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
					parser.addError("ERROR NEAR IF:  PARDER-EXPRESSION ");

				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ifStatement",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ifStatement ::= IF PARIZQ error PARDER expressions CIF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
					parser.addError("MISSING IF CONDITION");

				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ifStatement",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ifStatement ::= IF error condition PARDER expressions CIF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
					parser.addError("MISSING TOKEN: PARIZQ IF");

				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ifStatement",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ifStatement ::= IF PARIZQ condition PARDER expressions elseStatement CIF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eSleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object eS = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		


                                    MyNode nodoNuevo = new MyNode("TICIF :");
                                    MyNode hijo = ((MyNode) c);
                                    nodoNuevo.addHijo(hijo);

                                    if( !(((MyNode) e).value).equals("EXPRESSION")){
                                        MyNode nuevoNodoExp = new MyNode("EXPRESSION");
                                        nuevoNodoExp.addHijo((MyNode) e);
                                       nodoNuevo .addHijo(nuevoNodoExp);

                                    }else{
                                    nodoNuevo .addHijo((MyNode) e);

                                    }
                                    MyNode hijo3 = ((MyNode) eS);

                                    nodoNuevo.addHijo(hijo3);
                                    RESULT = nodoNuevo;
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ifStatement",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ifStatement ::= IF PARIZQ condition PARDER expressions CIF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		

                                MyNode nodoNuevo = new MyNode("TICIF :");
                                MyNode hijo = ((MyNode) c);
                                //MyNode hijo2 = ((MyNode) e);
                                nodoNuevo.addHijo(hijo);
                                //nodoNuevo.addHijo(hijo2);

                                    if( !(((MyNode) e).value).equals("EXPRESSION")){
                                        MyNode nuevoNodoExp = new MyNode("EXPRESSION");
                                        nuevoNodoExp.addHijo((MyNode) e);
                                       nodoNuevo.addHijo(nuevoNodoExp);

                                    }else{
                                    nodoNuevo.addHijo((MyNode) e);

                                    }


				RESULT = nodoNuevo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ifStatement",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cas ::= value CASE expressions ENDCASE DELIM 
            {
              Object RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object vl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		

                        MyNode nuevoNodo = new MyNode("SWITCH");
                        nuevoNodo.addHijo(new MyNode(vl.toString()));
                        nuevoNodo.addHijo((MyNode) es);
                        RESULT = nuevoNodo; 
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cas",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cases ::= cas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = ((MyNode) c);
					
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cases",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cases ::= cas cases 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = ((MyNode)c);
                                        nuevoNodo.addHijo((MyNode) cs);
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cases",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // switchStatement ::= SWITCH PARIZQ ID error cases CSWITCH 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
					parser.addError("ERROR NEAR SWITCH-CASE:  PARDER-EXPRESSION");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("switchStatement",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // switchStatement ::= SWITCH PARIZQ error PARDER cases CSWITCH 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
					parser.addError("MISSING SWITCH ID");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("switchStatement",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // switchStatement ::= SWITCH error ID PARDER cases CSWITCH 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
					parser.addError("MISSING PARIZQ SWITCH");
   
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("switchStatement",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // switchStatement ::= SWITCH PARIZQ ID PARDER cases CSWITCH 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		


                                    MyNode nuevoNodo = new MyNode("TACCHOOSE");
                                    nuevoNodo.addHijo(new MyNode(id.toString()));
                                    nuevoNodo.addHijo((MyNode) cS);
                                    RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("switchStatement",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statements ::= switchStatement 
            {
              Object RESULT =null;
		int sSleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sSright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sS = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
					
					RESULT = (MyNode)sS;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statements",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statements ::= forStatement 
            {
              Object RESULT =null;
		int fSleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fSright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fS = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				
					RESULT = (MyNode)fS;	
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statements",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statements ::= whileStatement 
            {
              Object RESULT =null;
		int wSleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int wSright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object wS = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
					
					RESULT = (MyNode)wS;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statements",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statements ::= ifStatement 
            {
              Object RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
					RESULT = (MyNode)ifs; 
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statements",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Parameters ::= value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

					RESULT = (MyNode)v;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parameters",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ParametersList ::= 
            {
              Object RESULT =null;
		
					 MyNode nuevoNodo = new MyNode("null");
                                         RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametersList",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ParametersList ::= Parameters 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
		                        MyNode nuevoNodo = ((MyNode) a);
					RESULT = nuevoNodo; 
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametersList",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ParametersList ::= Parameters COMMA ParametersList 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = new MyNode(((MyNode)a).value +","+((MyNode)al).value);
                                         RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametersList",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= TSTRING 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
			MyNode nuevoNodo = new MyNode("string");
                        RESULT = nuevoNodo;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= VOID 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
			MyNode nuevoNodo = new MyNode("void");
                        RESULT = nuevoNodo;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
			MyNode nuevoNodo = new MyNode("bool");
                        RESULT = nuevoNodo;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= ARRAYDD 
            {
              Object RESULT =null;
		int addleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int addright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object add = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        System.out.println(add);
			MyNode nuevoNodo = new MyNode("array2d:"+(String)add);
                        RESULT = nuevoNodo;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= ARRAYD 
            {
              Object RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        System.out.println(ad);
			MyNode nuevoNodo = new MyNode("array1d:"+(String)ad);
                        RESULT = nuevoNodo;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        
			MyNode nuevoNodo = new MyNode("char");
                        RESULT = nuevoNodo;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
			MyNode nuevoNodo = new MyNode("int");
                        RESULT = nuevoNodo;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // value ::= NULL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				MyNode nuevoNodo = new MyNode("NULL " + n.toString());
                               
				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // value ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				MyNode nuevoNodo = new MyNode("STRING:" + str.toString());

				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value ::= ARRAYDDVALI 
            {
              Object RESULT =null;
		int addvalIleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int addvalIright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object addvalI = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				MyNode nuevoNodo = new MyNode("INT_MATRIX:" + addvalI.toString());

				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value ::= ARRAYDVALI 
            {
              Object RESULT =null;
		int advalIleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int advalIright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object advalI = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				MyNode nuevoNodo = new MyNode("INT_ARRAY:" + advalI.toString());
                               
				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // value ::= ARRAYDDVALC 
            {
              Object RESULT =null;
		int addvalCleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int addvalCright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object addvalC = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				MyNode nuevoNodo = new MyNode("CHAR_MATRIX:" + addvalC.toString());
                               
				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value ::= ARRAYDVALC 
            {
              Object RESULT =null;
		int advalCleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int advalCright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object advalC = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				MyNode nuevoNodo = new MyNode("CHAR_ARRAY:" + advalC.toString());
                            
				RESULT = nuevoNodo;

			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value ::= BOOLVAL 
            {
              Object RESULT =null;
		int tFleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tFright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tF = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				MyNode nuevoNodo = new MyNode("BOOL:" + tF.toString());

				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // value ::= CHARVAL 
            {
              Object RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object character = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				MyNode nuevoNodo = new MyNode("CHAR:" + character.toString());
                           
				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value ::= ID PARIZQ ParametersList PARDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
				MyNode nuevoNodo = new MyNode("FUNTION:" + id.toString() +" - PARAMETERS:"+((MyNode)pl).value);
                               
				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
				MyNode nuevoNodo = new MyNode("ID:" + id.toString());
                               
				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= INTEGER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                MyNode nuevoNodo = new MyNode("INT:" + num.toString());
				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= value 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                MyNode nuevoNodo = ((MyNode) val);
				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= PARIZQ arithmeticExp PARDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                   MyNode nuevoNodo = new MyNode("("+((MyNode) e).value+")");
			        RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                MyNode nuevoNodo = ((MyNode) f);
				RESULT = nuevoNodo;
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("term",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= term opmultdiv factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        if((((MyNode)t).value).contains("INT")  && (((MyNode)f).value).contains("INT")){
    				if ((((MyNode)op).value).equals("*")) {
                                
                                      MyNode nuevoNodo = new MyNode(((MyNode)t).value +" * "+((MyNode)f).value);
                                      System.out.println("HOLAAAAAAAAAAAAA MULT");
                                      RESULT = nuevoNodo;
				}else if ((((MyNode)op).value).equals("/")) {
                                      MyNode nuevoNodo = new MyNode(((MyNode)t).value +" * "+((MyNode)f).value);
                                      System.out.println("HOLAAAAAAAAAAAAA DIV");
                                      RESULT = nuevoNodo;
				}
                        }else{
                            parser.addError("ERROR: OPERACION ARITMETICA SOLO SE PUEDE HACER CON TIPO ENTERO");  
                        }
			
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("term",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arithmeticExp ::= term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                MyNode nuevoNodo = ((MyNode) t);

						RESULT = nuevoNodo;
					
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arithmeticExp",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arithmeticExp ::= arithmeticExp opsum term 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opsumleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opsumright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object opsum = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                    if((((MyNode)e).value).contains("INT")  && (((MyNode)t).value).contains("INT")){
					 if ((((MyNode)opsum).value).equals("+")) {
                                                        System.out.println("SUMAAA");
                                                        MyNode nuevoNodo = new MyNode(((MyNode)e).value +" + "+((MyNode)t).value);
                                                        
							RESULT = nuevoNodo;
						}else  {
                                                        System.out.println("RESTAAAAAAA");
                                                        MyNode nuevoNodo = new MyNode(((MyNode)e).value +" - "+((MyNode)t).value);
							RESULT = nuevoNodo;
                                           } 
					}else{
                                              parser.addError("ERROR: OPERACION ARITMETICA SOLO SE PUEDE HACER CON TIPO ENTERO");  
                                         }
					
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arithmeticExp",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assignment ::= arithmeticExp 
            {
              Object RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = ((MyNode) aE);
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assignmentProc ::= 
            {
              Object RESULT =null;
		
                                                 MyNode nuevoNodo = new MyNode("null");
						RESULT = nuevoNodo;
					
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignmentProc",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assignmentProc ::= AS assignment 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                MyNode nuevoNodo = ((MyNode) a);
						RESULT = nuevoNodo;
					
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignmentProc",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variables ::= ID assignmentProc 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = new MyNode(id.toString());
                                        MyNode temp = (MyNode) a;
                                        nuevoNodo.addHijo((MyNode) a);
					RESULT = nuevoNodo;
                                         
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("variables",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // varDeclList ::= variables error varDeclList 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
					parser.addError("EXPECTED SEPARATOR ',' IN VARIABLE DECLARATION");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("varDeclList",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // varDeclList ::= variables 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = ((MyNode) vars);
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("varDeclList",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // varDeclList ::= variables COMMA varDeclList 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                         MyNode nuevoNodo = new MyNode("VARIABLES");
                                        MyNode left = ((MyNode)var);
                                        MyNode right = ((MyNode)vars);
                                        nuevoNodo.addHijo(left);
                                        if(right.getHijos().size() == 1){
                                            nuevoNodo.addHijo(right);
                                        }else{
                                           nuevoNodo.addHijos(right.getHijos(),right);

                                         }
					RESULT = nuevoNodo;



				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("varDeclList",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variableAssign ::= varDeclList DELIM 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                    MyNode nuevoNodo = ((MyNode) v);
                                    RESULT = nuevoNodo;
					 RESULT = v;
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("variableAssign",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variableDeclaration ::= SET type error DELIM 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                                parser.addError("EXPECTED VARIABLE DECLARATION");	
         
                            
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("variableDeclaration",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variableDeclaration ::= SET error varDeclList DELIM 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                parser.addError("EXPECTED TYPE IN VARIABLE DECLARATION");	
                
                            
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("variableDeclaration",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variableDeclaration ::= SET type varDeclList DELIM 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                        boolean flag = true;
                                        String message ="";
                                         //System.out.println("###########################################################################");
                                         MyNode varDec;
                                         MyNode nuevoNodo = ((MyNode) t);
                                        if( !(((MyNode) v).value).equals("VARIABLES")){
                                           varDec = new MyNode("VARIABLES");
                                             MyNode temp = ((MyNode)v).hijos.get(0);
                                             //System.out.println( "ESTA ES EL DATO "+(temp.value)+ "-- "+( (temp.value).contains("null")|| (temp.value).contains("INT")) );
                                             if(
                                                        ((temp.value).contains("INT") && (((MyNode) t).value).equals("int")) ||
                                                        ((temp.value).contains("CHAR") && (((MyNode) t).value).equals("char")) ||
                                                        ((temp.value).contains("CHAR_ARRAY") && (((MyNode) t).value).contains("array1d:char")) ||
                                                        ((temp.value).contains("INT_ARRAY") && (((MyNode) t).value).contains("array1d:int")) ||
                                                        ((temp.value).contains("CHAR_MATRIX") && (((MyNode) t).value).contains("array2d:char")) ||
                                                        ((temp.value).contains("INT_MATRIX") && (((MyNode) t).value).contains("array2d:int")) ||
                                                        ((temp.value).contains("BOOL") && (((MyNode) t).value).equals("bool")) ||
                                                        ((temp.value).contains("FUNCTION")) ||
                                                        ((temp.value).contains("ID")) ||
                                                        (temp.value).contains("null")
                                                ){
                                                //System.out.println("ES ENTERO");
                                                        
                                             }else{
                                                 flag = false;
                                                 message = message + "-" + "Se esperaba tipo "+((MyNode) t).value+" en la variable: "+((MyNode)v).value+" Se encontro: "+(temp.value) +"\n";
                                             }
                                             // System.out.println(message);
                                            
                                            if(!flag){
                                                parser.addError(message);
                                            }
                                             varDec.addHijo((MyNode)v);
                                             nuevoNodo.addHijo((MyNode) varDec);

                                        }else{
                                            for (int i = 0; i < ((MyNode)v).hijos.size(); i++) {
                                                MyNode temp = ((MyNode)v).hijos.get(i).hijos.get(0);
                                            
                                                if(     ((temp.value).contains("INT") && (((MyNode) t).value).equals("int")) ||
                                                        ((temp.value).contains("CHAR") && (((MyNode) t).value).equals("char")) ||
                                                        ((temp.value).contains("CHAR_ARRAY") && (((MyNode) t).value).contains("array1d:char")) ||
                                                        ((temp.value).contains("INT_ARRAY") && (((MyNode) t).value).contains("array1d:int")) ||
                                                        ((temp.value).contains("CHAR_MATRIX") && (((MyNode) t).value).contains("array2d:char")) ||
                                                        ((temp.value).contains("INT_MATRIX") && (((MyNode) t).value).contains("array2d:int")) ||
                                                        ((temp.value).contains("BOOL") && (((MyNode) t).value).equals("bool")) ||
                                                        ((temp.value).contains("FUNCTION")) ||
                                                        ((temp.value).contains("ID")) ||
                                                        (temp.value).contains("null")
                                                ){
                                                   
                                                        
                                                }else{
                                                    flag = false;
                                                    message = message + "###" + "Se esperaba tipo "+((MyNode) t).value+" en la variable: "+(((MyNode)v)).hijos.get(i).value +" Se encontro: "+(temp.value) +"\n";
                                                }
                                                //System.out.println(message);
                                            }
                                                varDec = (MyNode)v;
                                                nuevoNodo.addHijo((MyNode) varDec);
                                            if(!flag){
                                                parser.addError(message);
                                            }
                                         }


                                    RESULT = nuevoNodo;
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("variableDeclaration",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // returnStatement ::= RETURN value error 
            {
              Object RESULT =null;
		
						parser.addError("MISSING DELIM EXPECTED '#'");
						
					
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("returnStatement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // returnStatement ::= RETURN error DELIM 
            {
              Object RESULT =null;
		
						 parser.addError("MISSING RETURN VALUE");
						
					
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("returnStatement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // returnStatement ::= RETURN value DELIM 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                MyNode nuevoNodo = new MyNode(val.toString());
						RESULT = nuevoNodo;
					
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("returnStatement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= returnStatement 
            {
              Object RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = new MyNode("RETURN");
                                        nuevoNodo.addHijo((MyNode) rs);
					
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= printers 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = new MyNode("PRINTER");
                                        nuevoNodo.addHijo((MyNode) p);
					
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= scanners 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = new MyNode("SCANNER");
                                        nuevoNodo.addHijo((MyNode) s);
				
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= statements 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = new MyNode("STATEMENT");
                                        nuevoNodo.addHijo((MyNode) s);
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= variableAssign 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = new MyNode("VARIABLE ASSIGN :");
                                        nuevoNodo.addHijo((MyNode) va);
				
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= variableDeclaration 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = new MyNode("VARIABLE DEC :");
                                        nuevoNodo.addHijo((MyNode) vd);
				
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressions ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

                                        MyNode nuevoNodo = ((MyNode) e);

					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expressions",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressions ::= expression expressions 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

                                        MyNode nuevoNodo = new MyNode("EXPRESSION");
                                        MyNode aExpressiones = ((MyNode) es);
                                        nuevoNodo.addHijo((MyNode) e);
                                        if(aExpressiones.getHijos().size() == 1){
                                            nuevoNodo.addHijo(aExpressiones);
                                        }else{
                                           nuevoNodo.addHijos(aExpressiones.getHijos(),aExpressiones);

                                         }
                        
                                RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expressions",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // argument ::= type error 
            {
              Object RESULT =null;
		  
					System.err.println("MISSING ARGUMENT TYPE/ID");
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("argument",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // argument ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
					MyNode temp = ((MyNode) t);
					MyNode nuevoNodo = new MyNode(temp.value + "-" + id.toString());
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("argument",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // argumentList ::= 
            {
              Object RESULT =null;
		
					 MyNode nuevoNodo = new MyNode("null");
                                         RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("argumentList",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argumentList ::= argument 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
		                        MyNode nuevoNodo = ((MyNode) a);
					RESULT = nuevoNodo; 
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("argumentList",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argumentList ::= argument COMMA argumentList 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = new MyNode("ARGUMENT LIST");
                                        nuevoNodo.addHijo((MyNode) a);

                                        System.out.println(al + "---" + ((MyNode)al).getHijos() +"----" +((MyNode)al).getHijos().size());
                                        MyNode ArgumentList = (MyNode) al;
                                        if(ArgumentList.getHijos().size() == 0){
                                            nuevoNodo.addHijo(ArgumentList);
                                          
                                        }else{
                                             nuevoNodo.addHijos(ArgumentList.getHijos(),ArgumentList);
                                            
                                         }
                                         System.out.print("---------------------");
                                         System.out.println(nuevoNodo + "---" + ((MyNode)nuevoNodo).getHijos());
                                         RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("argumentList",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= FUNC type ID PARIZQ argumentList error OPENFUNC expressions CLOSEFUNC 
            {
              Object RESULT =null;
		
					 parser.addError("MISSING TOKEN NEAR: PARDER/EXPRESSION");

					
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= FUNC type ID error argumentList PARDER OPENFUNC expressions CLOSEFUNC 
            {
              Object RESULT =null;
		
					 parser.addError("MISSING TOKEN : PARIZQ");
					
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= FUNC error ID PARIZQ argumentList PARDER OPENFUNC expressions CLOSEFUNC 
            {
              Object RESULT =null;
		
					 parser.addError("MISSING FUNCTION: TYPE");
					
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= FUNC type error PARIZQ argumentList PARDER OPENFUNC expressions CLOSEFUNC 
            {
              Object RESULT =null;
		
					 parser.addError("MISSING FUNCTION ID");
					
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= FUNC type ID PARIZQ argumentList PARDER OPENFUNC expressions CLOSEFUNC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
					MyNode temp = ((MyNode) t);
                                        MyNode nuevoNodo = new MyNode(temp.value + " " + id.toString() + " ");
                                        nuevoNodo.addHijo((MyNode) e);
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functionList ::= function 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
					
                                        MyNode nuevoNodo = new MyNode("FUNCTION");
                                        nuevoNodo.addHijo((MyNode) f);
					RESULT = nuevoNodo; 
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("functionList",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // functionList ::= function functionList 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
					
                                        MyNode nuevoNodo = new MyNode("FUNCTION");
                                        nuevoNodo.addHijo((MyNode) f);
                                        nuevoNodo.addHijo((MyNode) fl);
					RESULT = nuevoNodo;         
					
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("functionList",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // functionDeclaration ::= FUNC type ID PARIZQ argumentList PARDER DELIM 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		

                                        MyNode nuevoNodo = (MyNode)t;                                       
                                        MyNode nuevoNodoHijoID = new MyNode(id.toString());

                                        MyNode argumentos;
                                        if( !(((MyNode) a).value).equals("ARGUMENT LIST")){
                                            argumentos = new MyNode("ARGUMENT LIST");
                                            argumentos.addHijo((MyNode) a);

                                        }else{
                                            argumentos = (MyNode)a;
                                         }



                                        nuevoNodoHijoID.addHijo(argumentos);
                                        nuevoNodo.addHijo(nuevoNodoHijoID);
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // functionDeclarationL ::= functionDeclaration 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = ((MyNode) fd);
					RESULT = nuevoNodo; 
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("functionDeclarationL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // functionDeclarationL ::= functionDeclarationL functionDeclaration 
            {
              Object RESULT =null;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fdl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        MyNode nuevoNodo = new MyNode("FUNCTION DECLARATION");
                                        nuevoNodo.addHijo((MyNode) fd);
                                        //System.out.println(fd);
                                       System.out.println(fdl + "---" + ((MyNode)fdl).getHijos() +"----" +((MyNode)fdl).getHijos().size());
                                        MyNode functionD = (MyNode) fdl;
                                        if(functionD.getHijos().size() == 1){
                                           nuevoNodo.addHijo(functionD);
                                        }else{
                                            nuevoNodo.addHijos(functionD.getHijos(),functionD);

                                         }
                                        System.out.print("---------------------");
                                         System.out.println(nuevoNodo + "---" + ((MyNode)nuevoNodo).getHijos());

                                         System.out.println("###################################");
                                         RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("functionDeclarationL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // mainClause ::= FUNC type MAIN PARIZQ argumentList PARDER error expressions CLOSEFUNC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                   parser.addError("ERROR NEAR:  OPENFUNC-EXPRESSION");
                           
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mainClause",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // mainClause ::= FUNC type error PARIZQ argumentList PARDER OPENFUNC expressions CLOSEFUNC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                    parser.addError("MISSING TOKEN :  MAIN");
                                
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mainClause",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mainClause ::= FUNC error MAIN PARIZQ argumentList PARDER OPENFUNC expressions CLOSEFUNC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                   //System.err.println("Expected type before main");

                                   parser.addError("MISSING TOKEN : TYPE");

				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mainClause",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainClause ::= error type MAIN PARIZQ argumentList PARDER OPENFUNC expressions CLOSEFUNC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                   parser.addError("MISSING TOKEN : FUNC" );
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mainClause",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainClause ::= FUNC type MAIN PARIZQ argumentList PARDER OPENFUNC expressions CLOSEFUNC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                        MyNode append = ((MyNode)t);    
                                        MyNode nuevoNodo = new MyNode(append.value + " MAIN :");


                                        MyNode argumentos;
                                        if( !(((MyNode) a).value).equals("ARGUMENT LIST")){
                                            argumentos = new MyNode("ARGUMENT LIST");
                                            argumentos.addHijo((MyNode) a);

                                        }else{
                                            argumentos = (MyNode)a;
                                         }
                                         MyNode expression;
                                        if( !(((MyNode) e).value).equals("EXPRESSION")){
                                            expression = new MyNode("EXPRESSION");
                                            expression.addHijo((MyNode) e);

                                        }else{
                                            expression = (MyNode)e;
                                         }

                                        nuevoNodo.addHijo(argumentos);
                                        nuevoNodo.addHijo(expression);
					
					RESULT = nuevoNodo;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mainClause",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // compilador ::= error compilador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("compilador",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // compilador ::= functionDeclarationL mainClause 
            {
              Object RESULT =null;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fdl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                    MyNode tree = new MyNode("INIT");
                                    MyNode raiz = new MyNode("RAIZ");

                                    if( !(((MyNode) fdl).value).equals("FUNCTION DECLARATION")){
                                        MyNode nuevoNodo = new MyNode("FUNCTION DECLARATION");
                                        nuevoNodo.addHijo((MyNode) fdl);
                                        raiz.addHijo(nuevoNodo);

                                    }else{
                                        raiz.addHijo((MyNode) fdl);

                                    }


                                    
                                    raiz.addHijo( (MyNode) mc );
                                    tree.addHijo( raiz );
                                    parser.root = tree;

				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("compilador",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // compilador ::= functionDeclarationL mainClause functionList 
            {
              Object RESULT =null;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object fdl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                    MyNode tree = new MyNode("INIT");
                                    MyNode raiz = new MyNode("RAIZ");
                                    if( !(((MyNode) fdl).value).equals("FUNCTION DECLARATION")){
                                        MyNode nuevoNodo = new MyNode("FUNCTION DECLARATION");
                                        nuevoNodo.addHijo((MyNode) fdl);
                                        raiz.addHijo(nuevoNodo);

                                    }else{
                                        raiz.addHijo((MyNode) fdl);

                                    }

                                    raiz.addHijo( (MyNode) mc );
                                    raiz.addHijo((MyNode) fl);
                                    tree.addHijo( raiz );
                                    parser.root = tree;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("compilador",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // compilador ::= mainClause 
            {
              Object RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                    MyNode tree = new MyNode("INIT");
                                    MyNode raiz = new MyNode("RAIZ");
                                    raiz.addHijo( (MyNode) mc );
                                    tree.addHijo( raiz );
                                    parser.root = tree;
				
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("compilador",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= compilador EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

